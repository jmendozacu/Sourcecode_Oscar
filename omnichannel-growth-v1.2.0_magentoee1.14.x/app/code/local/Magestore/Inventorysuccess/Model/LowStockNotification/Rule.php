<?php
/**
 * Magestore
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Magestore.com license that is
 * available through the world-wide-web at this URL:
 * http://www.magestore.com/license-agreement.html
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade this extension to newer
 * version in the future.
 *
 * @category    Magestore
 * @package     Magestore_Inventorysuccess
 * @copyright   Copyright (c) 2016 Magestore (http://www.magestore.com/)
 * @license     http://www.magestore.com/license-agreement.html
 */

/**
 * Adjuststock Model
 * 
 * @category    Magestore
 * @package     Magestore_Inventorysuccess
 * @author      Magestore Developer
 */
class Magestore_Inventorysuccess_Model_LowStockNotification_Rule extends Mage_CatalogRule_Model_Rule
{
    /**#@+
     * Rule's fields
     */
    const RULE_ID = 'rule_id';
    const RULE_NAME = 'rule_name';
    const DESCRIPTION = 'description';
    const FROM_DATE = 'from_date';
    const TO_DATE = 'to_date';
    const STATUS = 'status';
    const CONDITIONS_SERIALIZED = 'conditions_serialized';
    const PRIORITY = 'priority';
    const UPDATE_TIME_TYPE = 'update_time_type';
    const SPECIFIC_TIME = 'specific_time';
    const SPECIFIC_DAY = 'specific_day';
    const SPECIFIC_MONTH = 'specific_month';
    const LOWSTOCK_THRESHOLD_TYPE = 'lowstock_threshold_type';
    const LOWSTOCK_THRESHOLD_QTY = 'lowstock_threshold_qty';
    const LOWSTOCK_THRESHOLD = 'lowstock_threshold';
    const SALES_PERIOD = 'sales_period';
    const UPDATE_TYPE = 'update_type';
    const WAREHOUSE_IDS = 'warehouse_ids';
    const NOTIFIER_EMAILS = 'notifier_emails';
    const WARNING_MESSAGE = 'warning_message';
    const NEXT_TIME_ACTION = 'next_time_action';
    const APPLY = 'apply';
    const CREATED_AT = 'created_at';
    const UPDATED_AT = 'updated_at';

    /**#@+
     * Rule's statuses
     */
    const STATUS_ACTIVE = 1;
    const STATUS_INACTIVE = 0;

    /**
     * Rule's update time type
     */
    const TIME_TYPE_DAILY = 1;
    const TIME_TYPE_MONTHLY = 2;

    /**
     * Rule's update type
     */
    const TYPE_BOTH_SYSTEM_AND_WAREHOUSE = 1;
    const TYPE_ONLY_SYSTEM = 2;
    const TYPE_ONLY_WAREHOUSE = 3;

    /**
     * Rule's apply type
     */
    const  APPLIED = 1;
    const NOT_APPLY = 0;

    /**
     * Rule's update time type
     */
    const TYPE_LOWSTOCK_THRESHOLD_SALE_DAY = 1;
    const TYPE_LOWSTOCK_THRESHOLD_PRODUCT_QTY = 2;

    /**
     * Model construct that should be used for object initialization
     *
     * @return void
     */
    public function _construct()
    {
        parent::_construct();
        $this->_init('inventorysuccess/lowStockNotification_rule');
    }

    /**
     * @return mixed
     */
    public function getId()
    {
        return parent::getId(); // TODO: Change the autogenerated stub
    }

    /**
     * @param mixed $id
     * @return Mage_Core_Model_Abstract
     */
    public function setId($id)
    {
        return parent::setId($id); // TODO: Change the autogenerated stub
    }

    /**
     * Get rule name
     *
     * @return string
     */
    public function getRuleName()
    {
        return $this->_getData(self::RULE_NAME);
    }

    /**
     * Set rule name
     *
     * @param string $ruleName
     * @return $this
     */
    public function setSupplierCode($ruleName)
    {
        return $this->setData(self::RULE_NAME, $ruleName);
    }

    /**
     * Get description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->_getData(self::DESCRIPTION);
    }

    /**
     * Set description
     *
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        return $this->setData(self::DESCRIPTION, $description);
    }

    /**
     * Get from date
     *
     * @return string
     */
    public function getFromDate()
    {
        return $this->_getData(self::FROM_DATE);
    }

    /**
     * Set from date
     *
     * @param string $fromDate
     * @return $this
     */
    public function setFromDate($fromDate)
    {
        return $this->setData(self::FROM_DATE, $fromDate);
    }

    /**
     * Get to date
     *
     * @return string
     */
    public function getToDate()
    {
        return $this->_getData(self::TO_DATE);
    }

    /**
     * Set to date
     *
     * @param string $toDate
     * @return $this
     */
    public function setToDate($toDate)
    {
        return $this->setData(self::TO_DATE, $toDate);
    }

    /**
     * Get status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->_getData(self::STATUS);
    }

    /**
     * Set status
     *
     * @param int $status
     * @return $this
     */
    public function setStatus($status)
    {
        return $this->setData(self::STATUS, $status);
    }


    /**
     * Get conditions serialized
     *
     * @return string
     */
    public function getConditionsSerialized()
    {
        return $this->_getData(self::CONDITIONS_SERIALIZED);
    }

    /**
     * Set conditions serialized
     *
     * @param string $conditionsSerialized
     * @return $this
     */
    public function setConditionsSerialized($conditionsSerialized)
    {
        return $this->setData(self::CONDITIONS_SERIALIZED, $conditionsSerialized);
    }

    /**
     * Get priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->_getData(self::PRIORITY);
    }

    /**
     * Set priority
     *
     * @param int $priority
     * @return $this
     */
    public function setPriority($priority)
    {
        return $this->setData(self::PRIORITY, $priority);
    }

    /**
     * Get update time type
     *
     * @return int
     */
    public function getUpdateTimeType()
    {
        return $this->_getData(self::UPDATE_TIME_TYPE);
    }

    /**
     * Set update time type
     *
     * @param int $updateTimeType
     * @return $this
     */
    public function setUpdateTimeType($updateTimeType)
    {
        return $this->setData(self::UPDATE_TIME_TYPE, $updateTimeType);
    }

    /**
     * Get specific time
     *
     * @return string
     */
    public function getSpecificTime()
    {
        return $this->_getData(self::SPECIFIC_TIME);
    }

    /**
     * Set specific time
     *
     * @param string $specificTime
     * @return $this
     */
    public function setSpecificTime($specificTime)
    {
        return $this->setData(self::SPECIFIC_TIME, $specificTime);
    }

    /**
     * Get specific day
     *
     * @return string
     */
    public function getSpecificDay()
    {
        return $this->_getData(self::SPECIFIC_DAY);
    }

    /**
     * Set specific day
     *
     * @param string $specificDay
     * @return $this
     */
    public function setSpecificDay($specificDay)
    {
        return $this->setData(self::SPECIFIC_DAY, $specificDay);
    }

    /**
     * Get specific month
     *
     * @return string
     */
    public function getSpecificMonth()
    {
        return $this->_getData(self::SPECIFIC_MONTH);
    }

    /**
     * Set specific month
     *
     * @param string $specificMonth
     * @return $this
     */
    public function setSpecificMonth($specificMonth)
    {
        return $this->setData(self::SPECIFIC_MONTH, $specificMonth);
    }

    /**
     * Get lowstock threshold type
     *
     * @return int
     */
    public function getLowstockThresholdType()
    {
        return $this->_getData(self::LOWSTOCK_THRESHOLD_TYPE);
    }

    /**
     * Set lowstock threshold type
     *
     * @param int $lowstockThresholdType
     * @return $this
     */
    public function setLowstockThresholdType($lowstockThresholdType)
    {
        return $this->setData(self::LOWSTOCK_THRESHOLD_TYPE, $lowstockThresholdType);
    }

    /**
     * Get lowstock threshold qty
     *
     * @return int
     */
    public function getLowstockThresholdQty()
    {
        return $this->_getData(self::LOWSTOCK_THRESHOLD_QTY);
    }

    /**
     * Set lowstock threshold qty
     *
     * @param int $lowstockThresholdQty
     * @return $this
     */
    public function setLowstockThresholdQty($lowstockThresholdQty)
    {
        return $this->setData(self::LOWSTOCK_THRESHOLD_QTY, $lowstockThresholdQty);
    }

    /**
     * Get lowstock threshold
     *
     * @return int
     */
    public function getLowstockThreshold()
    {
        return $this->_getData(self::LOWSTOCK_THRESHOLD);
    }

    /**
     * Set lowstock threshold
     *
     * @param int $lowstockThreshold
     * @return $this
     */
    public function setLowstockThreshold($lowstockThreshold)
    {
        return $this->setData(self::LOWSTOCK_THRESHOLD, $lowstockThreshold);
    }

    /**
     * Get sales period
     *
     * @return int
     */
    public function getSalesPeriod()
    {
        return $this->_getData(self::SALES_PERIOD);
    }

    /**
     * Set sales period
     *
     * @param int $salesPeriod
     * @return $this
     */
    public function setSalesPeriod($salesPeriod)
    {
        return $this->setData(self::SALES_PERIOD, $salesPeriod);
    }

    /**
     * Get update type
     *
     * @return int
     */
    public function getUpdateType()
    {
        return $this->_getData(self::UPDATE_TYPE);
    }

    /**
     * Set update type
     *
     * @param int $updateType
     * @return $this
     */
    public function setUpdateType($updateType)
    {
        return $this->setData(self::UPDATE_TYPE, $updateType);
    }

    /**
     * Get warehouse ids
     *
     * @return string
     */
    public function getWarehouseIds()
    {
        return $this->_getData(self::WAREHOUSE_IDS);
    }

    /**
     * Set warehouse ids
     *
     * @param string $warehouseIds
     * @return $this
     */
    public function setWarehouseIds($warehouseIds)
    {
        return $this->setData(self::WAREHOUSE_IDS, $warehouseIds);
    }

    /**
     * Get Notification recipients
     *
     * @return string
     */
    public function getNotifierEmails()
    {
        return $this->_getData(self::NOTIFIER_EMAILS);
    }

    /**
     * Set Notification recipients
     *
     * @param string $notifierEmails
     * @return $this
     */
    public function setNotifierEmails($notifierEmails)
    {
        return $this->setData(self::NOTIFIER_EMAILS, $notifierEmails);
    }

    /**
     * Get warning message
     *
     * @return string
     */
    public function getWarningMessage()
    {
        return $this->_getData(self::WARNING_MESSAGE);
    }

    /**
     * Set warning message
     *
     * @param string $warningMessage
     * @return $this
     */
    public function setWarningMessage($warningMessage)
    {
        return $this->setData(self::WARNING_MESSAGE, $warningMessage);
    }

    /**
     * Get next time action
     *
     * @return string
     */
    public function getNextTimeAction()
    {
        return $this->_getData(self::NEXT_TIME_ACTION);
    }

    /**
     * Set next time action
     *
     * @param string $nextTimeAction
     * @return $this
     */
    public function setNextTimeAction($nextTimeAction)
    {
        return $this->setData(self::NEXT_TIME_ACTION, $nextTimeAction);
    }

    /**
     * Get apply
     *
     * @return string
     */
    public function getApply()
    {
        return $this->_getData(self::APPLY);
    }

    /**
     * Set apply
     *
     * @param string $apply
     * @return $this
     */
    public function setApply($apply)
    {
        return $this->setData(self::APPLY, $apply);
    }

    /**
     * Get created at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->_getData(self::CREATED_AT);
    }

    /**
     * Set created at
     *
     * @param string $createdAt
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        return $this->setData(self::CREATED_AT, $createdAt);
    }

    /**
     * Get updated at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->_getData(self::UPDATED_AT);
    }

    /**
     * Set updated at
     *
     * @param string $updatedAt
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        return $this->setData(self::UPDATED_AT, $updatedAt);
    }

    /**
     * Prepare rule's statuses.
     *
     * @return array
     */
    public function getAvailableStatuses()
    {
        return array (
            self::STATUS_ACTIVE => Mage::helper('inventorysuccess')->__('Active'),
            self::STATUS_INACTIVE=>Mage::helper('inventorysuccess')->__('Inactive')
        );
    }

    /**
     * Prepare rule's applies.
     *
     * @return array
     */
    public function getAvailableApply()
    {
        return array (
            self::APPLIED => Mage::helper('inventorysuccess')->__('Yes'),
            self::NOT_APPLY => Mage::helper('inventorysuccess')->__('No')
        );
    }

    /**
     * Prepare rule's update time type.
     *
     * @return array
     */
    public function getAvailableUpdateTimeType()
    {
        return array (
            self::TIME_TYPE_DAILY => Mage::helper('inventorysuccess')->__('Daily'),
            self::TIME_TYPE_MONTHLY => Mage::helper('inventorysuccess')->__('Monthly')
        );
    }

    /**
     * Prepare rule's update type.
     *
     * @return array
     */
    public function getAvailableUpdateType()
    {
        return array (
            self::TYPE_BOTH_SYSTEM_AND_WAREHOUSE => Mage::helper('inventorysuccess')->__('Both of Warehouse and Global'),
            self::TYPE_ONLY_SYSTEM => Mage::helper('inventorysuccess')->__('Global'),
            self::TYPE_ONLY_WAREHOUSE => Mage::helper('inventorysuccess')->__('Warehouse')
        );
    }

    /**
     * Prepare rule's Low Stock Threshold type.
     *
     * @return array
     */
    public function getAvailableLowStockThresholdType()
    {
        return array (
            self::TYPE_LOWSTOCK_THRESHOLD_SALE_DAY => Mage::helper('inventorysuccess')->__('Availability Days'),
            self::TYPE_LOWSTOCK_THRESHOLD_PRODUCT_QTY => Mage::helper('inventorysuccess')->__('Available Qty')
        );
    }

    /**
     * Prepare website to default assigned store map
     *
     * @return array
     */
    public function _getWebsitesMap()
    {
        $map = array();
        foreach ($this->_app->getWebsites(true) as $website) {
            if ($website->getDefaultStore()) {
                $map[$website->getId()] = $website->getDefaultStore()->getId();
            }
        }
        return $map;
    }

    /**
     *  Prepare data before saving
     * @return $this
     */
    public function _beforeSave()
    {
        $ruleService = Magestore_Coresuccess_Model_Service::ruleService();
        $nextTime = $ruleService->getNewNextTime($this);
        $this->setNextTimeAction($nextTime);
        parent::_beforeSave();
        return $this;
    }
}