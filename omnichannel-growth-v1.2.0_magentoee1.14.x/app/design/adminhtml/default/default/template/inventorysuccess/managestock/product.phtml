<?php
/**
 * Magestore
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Magestore.com license that is
 * available through the world-wide-web at this URL:
 * http://www.magestore.com/license-agreement.html
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade this extension to newer
 * version in the future.
 *
 * @category    Magestore
 * @package     Magestore_Inventorysuccess
 * @copyright   Copyright (c) 2016 Magestore (http://www.magestore.com/)
 * @license     http://www.magestore.com/license-agreement.html
 */

$blockGrid = $this->getBlockGrid();
$inforGrid = $this->getStockInformationGrid();
$movementGrid = $this->getStockMovementGrid();
$gridJsObjectName = $blockGrid->getJsObjectName();
$gridJsStockInformationObjectName = $inforGrid->getJsObjectName();
$gridJsStockMovementObjectName = $movementGrid->getJsObjectName();
$hiddenInputField = $blockGrid->getHiddenInputField();
?>
<style type="text/css">
    .warehouse_buttons {
        width: 100%;
        margin: .5em 0;
        display: table;
    }

    .warehouse_buttons button {
        float: right;
        margin: 0 0 0 5px;
    }
</style>
<div class="warehouse_buttons content-header">
    <button id="save_warehouse_product" class="scalable save">
        <span>
            <span><?php echo $this->__('Update Stock') ?></span>
        </span>
    </button>
</div>
<?php echo $this->getGridHtml(); ?>
<input type="hidden" name="selected_products" id="selected_products"  value=""/>
<!-- Stock information modal -->
<div class="modal right fade" id="stock_information_grid_container" tabindex="-1"
     role="dialog" aria-labelledby="modalLabel" style="display:none">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <h2 class="modal-title" id="stock_information_grid_name" data-role="title">
                <?php echo $this->__('View Product Information') ?>
            </h2>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span
                    aria-hidden="true">&times;</span></button>
            <div class="modal-body">
                <?php echo $this->getStockInformationHtml(); ?>
            </div>
        </div>
    </div>
</div>
<!-- Stock movement modal -->
<div class="modal right fade" id="stock_movement_grid_container" tabindex="-1"
     role="dialog" aria-labelledby="modalLabel" style="display:none">
    <div class="modal-dialog" role="document" id="stock_movement_grid_container_dialog">
        <div class="modal-content">
            <h2 class="modal-title" id="stock_movement_grid_name" data-role="title">
                <?php echo $this->__('View Stock Movement') ?>
            </h2>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span
                    aria-hidden="true">&times;</span></button>
            <div class="modal-body">
                <?php echo $this->getStockMovementHtml(); ?>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    var warehouseSelectedProduct = new WarehouseSelectedProduct({
        "selectedItems": <?php /* @escapeNotVerified */ echo $blockGrid->getSelectedItems(); ?>,
        "gridJsObjectName": <?php /* @escapeNotVerified */ echo '"' . $gridJsObjectName . '"' ?: '{}'; ?>,
        "gridJsStockInformationObjectName": <?php /* @escapeNotVerified */ echo '"' . $gridJsStockInformationObjectName . '"' ?: '{}'; ?>,
        "gridJsStockMovementObjectName": <?php /* @escapeNotVerified */ echo '"' . $gridJsStockMovementObjectName . '"' ?: '{}'; ?>,
        "hiddenInputField": <?php /* @escapeNotVerified */ echo '"' . $hiddenInputField . '"' ?>,
        "editFields": <?php /* @escapeNotVerified */ echo $blockGrid->getEditFields(); ?>,
        "saveBtn": "save_warehouse_product",
        "saveUrl": <?php /* @escapeNotVerified */ echo '"' . $blockGrid->getSaveUrl() . '"' ?: '""'; ?>,
        "stockInformationUrl": <?php /* @escapeNotVerified */ echo '"' . $inforGrid->getGridUrl() . '"' ?: '""'; ?>,
        "stockMovementUrl": <?php /* @escapeNotVerified */ echo '"' . $movementGrid->getGridUrl() . '"' ?: '""'; ?>,
        "changeWarehouseBtn": "select_warehouse_option",
        "messages": {
            "noWarehouseSelected": <?php /* @escapeNotVerified */ echo '"' . $this->__('Please select a warehouse.') . '"'?>,
            "noItemSelected": <?php /* @escapeNotVerified */ echo '"' . $this->__('Please select products to update.') . '"'?>,
        }
    });
    Calendar.prototype.create = function (_par) {
        var parent = null;
        if (! _par) {
            // default parent is the document body, in which case we create
            // a popup calendar.
            parent = document.getElementsByTagName("body")[0];
            this.isPopup = true;
        } else {
            parent = _par;
            this.isPopup = false;
        }
        this.date = this.dateStr ? new CalendarDateObject(this.dateStr) : new CalendarDateObject();

        var table = Calendar.createElement("table");
        this.table = table;
        table.cellSpacing = 0;
        table.cellPadding = 0;
        table.calendar = this;
        Calendar.addEvent(table, "mousedown", Calendar.tableMouseDown);

        var div = Calendar.createElement("div");
        this.element = div;
        div.className = "calendar";
        if (this.isPopup) {
            div.style.position = "absolute";
            div.style.display = "none";
        }
        div.appendChild(table);

        var thead = Calendar.createElement("thead", table);
        var cell = null;
        var row = null;

        var cal = this;
        var hh = function (text, cs, navtype) {
            cell = Calendar.createElement("td", row);
            cell.colSpan = cs;
            cell.className = "button";
            if (navtype != 0 && Math.abs(navtype) <= 2)
                cell.className += " nav";
            Calendar._add_evs(cell);
            cell.calendar = cal;
            cell.navtype = navtype;
            cell.innerHTML = "<div unselectable='on'>" + text + "</div>";
            return cell;
        };

        row = Calendar.createElement("tr", thead);
        var title_length = 6;
        (this.isPopup) && --title_length;
        (this.weekNumbers) && ++title_length;

        hh("?", 1, 400).ttip = Calendar._TT["INFO"];
        this.title = hh("", title_length, 300);
        this.title.className = "title";
        if (this.isPopup) {
            this.title.ttip = Calendar._TT["DRAG_TO_MOVE"];
            this.title.style.cursor = "move";
            hh("&#x00d7;", 1, 200).ttip = Calendar._TT["CLOSE"];
        }

        row = Calendar.createElement("tr", thead);
        row.className = "headrow";

        this._nav_py = hh("&#x00ab;", 1, -2);
        this._nav_py.ttip = Calendar._TT["PREV_YEAR"];

        this._nav_pm = hh("&#x2039;", 1, -1);
        this._nav_pm.ttip = Calendar._TT["PREV_MONTH"];

        this._nav_now = hh(Calendar._TT["TODAY"], this.weekNumbers ? 4 : 3, 0);
        this._nav_now.ttip = Calendar._TT["GO_TODAY"];

        this._nav_nm = hh("&#x203a;", 1, 1);
        this._nav_nm.ttip = Calendar._TT["NEXT_MONTH"];

        this._nav_ny = hh("&#x00bb;", 1, 2);
        this._nav_ny.ttip = Calendar._TT["NEXT_YEAR"];

        // day names
        row = Calendar.createElement("tr", thead);
        row.className = "daynames";
        if (this.weekNumbers) {
            cell = Calendar.createElement("td", row);
            cell.className = "name wn";
            cell.innerHTML = Calendar._TT["WK"];
        }
        for (var i = 7; i > 0; --i) {
            cell = Calendar.createElement("td", row);
            if (!i) {
                cell.navtype = 100;
                cell.calendar = this;
                Calendar._add_evs(cell);
            }
        }
        this.firstdayname = (this.weekNumbers) ? row.firstChild.nextSibling : row.firstChild;
        this._displayWeekdays();

        var tbody = Calendar.createElement("tbody", table);
        this.tbody = tbody;

        for (i = 6; i > 0; --i) {
            row = Calendar.createElement("tr", tbody);
            if (this.weekNumbers) {
                cell = Calendar.createElement("td", row);
            }
            for (var j = 7; j > 0; --j) {
                cell = Calendar.createElement("td", row);
                cell.calendar = this;
                Calendar._add_evs(cell);
            }
        }

        if (this.showsTime) {
            row = Calendar.createElement("tr", tbody);
            row.className = "time";

            cell = Calendar.createElement("td", row);
            cell.className = "time";
            cell.colSpan = 2;
            cell.innerHTML = Calendar._TT["TIME"] || "&nbsp;";

            cell = Calendar.createElement("td", row);
            cell.className = "time";
            cell.colSpan = this.weekNumbers ? 4 : 3;

            (function(){
                function makeTimePart(className, init, range_start, range_end) {
                    var part = Calendar.createElement("span", cell);
                    part.className = className;
                    part.innerHTML = init;
                    part.calendar = cal;
                    part.ttip = Calendar._TT["TIME_PART"];
                    part.navtype = 50;
                    part._range = [];
                    if (typeof range_start != "number")
                        part._range = range_start;
                    else {
                        for (var i = range_start; i <= range_end; ++i) {
                            var txt;
                            if (i < 10 && range_end >= 10) txt = '0' + i;
                            else txt = '' + i;
                            part._range[part._range.length] = txt;
                        }
                    }
                    Calendar._add_evs(part);
                    return part;
                };
                var hrs = cal.date.getHours();
                var mins = cal.date.getMinutes();
                var t12 = !cal.time24;
                var pm = (hrs > 12);
                if (t12 && pm) hrs -= 12;
                var H = makeTimePart("hour", hrs, t12 ? 1 : 0, t12 ? 12 : 23);
                var span = Calendar.createElement("span", cell);
                span.innerHTML = ":";
                span.className = "colon";
                var M = makeTimePart("minute", mins, 0, 59);
                var AP = null;
                cell = Calendar.createElement("td", row);
                cell.className = "time";
                cell.colSpan = 2;
                if (t12)
                    AP = makeTimePart("ampm", pm ? "pm" : "am", ["am", "pm"]);
                else
                    cell.innerHTML = "&nbsp;";

                cal.onSetTime = function() {
                    var pm, hrs = this.date.getHours(),
                        mins = this.date.getMinutes();
                    if (t12) {
                        pm = (hrs >= 12);
                        if (pm) hrs -= 12;
                        if (hrs == 0) hrs = 12;
                        AP.innerHTML = pm ? "pm" : "am";
                    }
                    H.innerHTML = (hrs < 10) ? ("0" + hrs) : hrs;
                    M.innerHTML = (mins < 10) ? ("0" + mins) : mins;
                };

                cal.onUpdateTime = function() {
                    var date = this.date;
                    var h = parseInt(H.innerHTML, 10);
                    if (t12) {
                        if (/pm/i.test(AP.innerHTML) && h < 12)
                            h += 12;
                        else if (/am/i.test(AP.innerHTML) && h == 12)
                            h = 0;
                    }
                    var d = date.getDate();
                    var m = date.getMonth();
                    var y = date.getFullYear();
                    date.setHours(h);
                    date.setMinutes(parseInt(M.innerHTML, 10));
                    date.setFullYear(y);
                    date.setMonth(m);
                    date.setDate(d);
                    this.dateClicked = false;
                    this.callHandler();
                };
            })();
        } else {
            this.onSetTime = this.onUpdateTime = function() {};
        }

        var tfoot = Calendar.createElement("tfoot", table);

        row = Calendar.createElement("tr", tfoot);
        row.className = "footrow";

        cell = hh(Calendar._TT["SEL_DATE"], this.weekNumbers ? 8 : 7, 300);
        cell.className = "ttip";
        if (this.isPopup) {
            cell.ttip = Calendar._TT["DRAG_TO_MOVE"];
            cell.style.cursor = "move";
        }
        this.tooltips = cell;

        div = Calendar.createElement("div", this.element);
        this.monthsCombo = div;
        div.className = "combo";
        for (i = 0; i < Calendar._MN.length; ++i) {
            var mn = Calendar.createElement("div");
            mn.className = Calendar.is_ie ? "label-IEfix" : "label";
            mn.month = i;
            mn.innerHTML = Calendar._SMN[i];
            div.appendChild(mn);
        }

        div = Calendar.createElement("div", this.element);
        this.yearsCombo = div;
        div.className = "combo";
        for (i = 12; i > 0; --i) {
            var yr = Calendar.createElement("div");
            yr.className = Calendar.is_ie ? "label-IEfix" : "label";
            div.appendChild(yr);
        }

        this._init(this.firstDayOfWeek, this.date);
        $('stock_movement_grid_container_dialog').appendChild(this.element);
    };
</script>